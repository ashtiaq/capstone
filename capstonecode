#Loading NDJSON data#
install.packages("jsonlite")
library(jsonlite)
business <-fromJSON(file="Users/tanvim/Downloads/yelp_dataset/yelp_academic_dataset_business.json")
business <-stream_in(file("Users/tanvim/Downloads/yelp_dataset/yelp_academic_dataset_business.json"))

#Finding restaurants#
business_flat <- flatten(business)
install.packages("tibble")
library(tibble)
business_flat_tbl <- as_data_frame(business_flat)
business_flat_tbl
business_flat_tbl_restaurants <- business_flat_tbl %>% filter(str_detect(business_flat_tbl$categories, "Restaurant"))

#Checking NAs#
na_count_df_quarter <- na_count[na_count > 0.25*(nrow(business_flat_tbl_restaurants))]
names(na_count_df_quarter)
na_count_df_quarter_remove <- na_count_df_quarter[-(24:28)]
names(na_count_df_quarter_remove)
restaurants <- subset(business_flat_tbl_restaurants, select = !(c(names(business_flat_tbl_restaurants)) %in% c(names(na_count_df_quarter_remove))))

#Example of what was required to unnest variables - this was repeated for many different nested objects, which were cleaned and later joined together#
GoodForMeal4.str_split <- str_split(GoodForMeal4$attributes.GoodForMeal, ",", simplify = TRUE)
str_split(GoodForMeal5$brunch, ": ", simplify = TRUE) %>% cbind(GoodForMeal5$business_id) %>% tbl_df() -> brunch
colnames(brunch) <- c("business_id", "gfmtype", "gfbrunch")
brunch <- brunch[, c(3,1,2)]
colnames(brunch) <- c("business_id", "gfmtype", "gfbrunch")
brunch <- tbl_df(select(brunch, -(gfmtype)))
brunch$gfbrunch <- as.logical(brunch$gfbrunch)
brunch

#Attempting with simplifified rest data set using 'tree' function#
set.seed(101)
train.rest = sample(1:nrow(rest3), 40000)
treetry.rest3 <- tree(stars ~ .-business_id, rest3, subset = train.rest)
plot(treetry.rest3)
text(treetry.rest3, pretty = 0)
pred.treetry.rest3 <- predict(treetry.rest3, rest3[-train.rest,], type = "class")
with(rest3[-train.rest,], table(pred.treetry.rest3, stars))
# pred.treetry.rest3 v/s stars
#       [1,6] (6,9]
# [1,6]  8393  4471
# (6,9]  2157  2170
# (8393 + 2170)/(57191-40000) = 0.6144494 correct classification rate#

